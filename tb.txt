-- Selecione todos os títulos de livros na tabela livros.
SELECT titulo
FROM livros;

-- Selecione todos os nomes de autores nascidos antes de 1900.
SELECT nome
FROM autores
WHERE YEAR(nascimento) < 1900;

-- Liste todos os livros escritos por 'J.K. Rowling'.
SELECT livros.titulo
FROM livros
JOIN autores ON livros.autor_id = autores.id
WHERE autores.nome = 'J.K. Rowling';

-- Encontre todos os alunos matriculados em 'Engenharia de Software'.
SELECT alunos.nome
FROM alunos
JOIN matriculas ON alunos.id = matriculas.aluno_id
WHERE matriculas.curso = 'Engenharia de Software';

-- Calcule a receita total gerada por cada produto.
SELECT DISTINCT v1.produto, v1.receita + v2.receita + v3.receita AS receita_total
FROM vendas v1
JOIN vendas v2 ON v1.produto = v2.produto
JOIN vendas v3 ON v1.produto = v3.produto;

-- Determine o número total de livros por autor.
SELECT autores.nome, livros.id AS total_livros
FROM autores
LEFT JOIN livros ON autores.id = livros.autor_id;

-- Agrupe os alunos por curso e conte quantos alunos estão matriculados em cada curso.
SELECT matriculas.curso, alunos.id AS total_alunos
FROM matriculas
JOIN alunos ON matriculas.aluno_id = alunos.id;

-- Liste a média de receita para cada produto.
SELECT DISTINCT v1.produto, (v1.receita + v2.receita + v3.receita) / 3 AS media_receita
FROM vendas v1
JOIN vendas v2 ON v1.produto = v2.produto
JOIN vendas v3 ON v1.produto = v3.produto;

-- Encontre os produtos que geraram uma receita total superior a $10.000.
SELECT DISTINCT v1.produto, (v1.receita + v2.receita + v3.receita) AS receita_total
FROM vendas v1
JOIN vendas v2 ON v1.produto = v2.produto
JOIN vendas v3 ON v1.produto = v3.produto
HAVING receita_total > 10000;

-- Determine os autores que têm mais de 2 livros publicados.
SELECT autores.nome
FROM autores
LEFT JOIN livros ON autores.id = livros.autor_id
GROUP BY autores.id, autores.nome
HAVING livros.id > 2;

-- Junte as tabelas livros e autores e selecione todos os livros com seus respectivos autores.
SELECT autores.nome AS autor, livros.titulo AS livro
FROM autores
LEFT JOIN livros ON autores.id = livros.autor_id;

-- Liste todos os alunos e os cursos em que estão matriculados.
SELECT alunos.nome, matriculas.curso
FROM alunos
LEFT JOIN matriculas ON alunos.id = matriculas.aluno_id;

-- Usando LEFT JOIN, selecione todos os autores e seus livros, incluindo autores que não têm livros publicados.
SELECT autores.nome, livros.titulo
FROM autores
LEFT JOIN livros ON autores.id = livros.autor_id;

-- Com RIGHT JOIN, liste todos os cursos e alunos, mesmo que o curso não tenha nenhum aluno matriculado.
SELECT matriculas.curso, alunos.nome
FROM matriculas
RIGHT JOIN alunos ON matriculas.aluno_id = alunos.id;

-- Utilizando INNER JOIN, mostre somente os alunos e cursos que possuem correspondência mútua.
SELECT alunos.nome, matriculas.curso
FROM alunos
INNER JOIN matriculas ON alunos.id = matriculas.aluno_id;

-- Descubra qual autor tem a maior quantidade de livros publicados.
SELECT autores.nome, livros.id AS total_livros
FROM autores
LEFT JOIN livros ON autores.id = livros.autor_id
ORDER BY total_livros DESC
LIMIT 1;

-- Determine o produto que gerou a menor receita.
SELECT DISTINCT v1.produto, v1.receita AS menor_receita
FROM vendas v1
JOIN vendas v2 ON v1.produto = v2.produto
GROUP BY v1.produto;